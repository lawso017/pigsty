# We have customized the Vagrantfile to load server specs from an external YAML file.
# This allows us to use the same Vagrantfile for different projects and environments.
require 'yaml'

# --- Load Machine Specifications ---

# Define the default specs file path (relative to this Vagrantfile)
default_specs_file = File.join(File.dirname(__FILE__), 'specs.yml')

# Check for custom specs file path via environment variable
custom_specs_file = ENV['PIGSTY_VAGRANT_SPECS']

# Determine which specs file to load
specs_file_to_load = default_specs_file
if custom_specs_file
  if File.exist?(custom_specs_file)
    puts "INFO: Loading custom Vagrant specs from #{custom_specs_file}"
    specs_file_to_load = custom_specs_file
  else
    puts "WARN: PIGSTY_VAGRANT_SPECS environment variable set to '#{custom_specs_file}', but file not found. Using default specs."
  end
end

# Load the specs YAML file
BEGIN { $VERBOSE = nil } # hide ruby warnings
Specs = begin
  YAML.load_file(specs_file_to_load)['specs'] || []
rescue Errno::ENOENT
  raise "ERROR: Specs file not found at '#{specs_file_to_load}'. Please create it or set PIGSTY_VAGRANT_SPECS correctly."
rescue Psych::SyntaxError => e
  raise "ERROR: Failed to parse specs file '#{specs_file_to_load}': #{e.message}"
end

# This is the Vagrantfile template for the default virtualbox provider

# read ssh key from current user's ~/.ssh
ssh_prv_key = File.read(File.join(ENV['HOME'], '.ssh', 'id_rsa'))
ssh_pub_key = File.readlines(File.join(ENV['HOME'], '.ssh', 'id_rsa.pub')).first.strip

Vagrant.configure("2") do |config|
    config.ssh.insert_key = false
    config.vm.box_check_update = false
    config.vm.synced_folder ".", "/vagrant", disabled: true
    config.vm.provision "shell" do |s|
      s.inline = <<-SHELL
        if grep -sq "#{ssh_pub_key}" /home/vagrant/.ssh/authorized_keys; then
          echo "SSH keys already provisioned." ; exit 0;
        fi
        echo "SSH key provisioning."
        sshd=/home/vagrant/.ssh
        mkdir -p ${sshd}; touch ${sshd}/{authorized_keys,config}
        echo #{ssh_pub_key}   >> ${sshd}/authorized_keys
        echo #{ssh_pub_key}   >  ${sshd}/id_rsa.pub      ; chmod 644 ${sshd}/id_rsa.pub
        echo "#{ssh_prv_key}" >  ${sshd}/id_rsa          ; chmod 600 ${sshd}/id_rsa
        if ! grep -q "StrictHostKeyChecking" ${sshd}/config; then
            echo 'StrictHostKeyChecking=no' >> ${sshd}/config
        fi
        chown -R vagrant:vagrant /home/vagrant
        exit 0
      SHELL
    end

    Specs.each_with_index do |spec, index|
        config.vm.define spec["name"] do |node|
            node.vm.box = spec["image"]
            node.vm.network "private_network", ip: spec["ip"]
            node.vm.hostname = spec["name"]

            node.vm.provider "virtualbox" do |v|
                v.linked_clone = true
                v.customize ["modifyvm", :id, "--cpus", spec["cpu"], "--memory", spec["mem"], "--nictype1", "virtio", "--nictype2", "virtio", "--hwvirtex", "on", "--ioapic", "on", "--rtcuseutc", "on", "--vtxvpid", "on", "--largepages", "on"]
                v.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000]
            end

            # provision an additional disk for minio nodes
            if spec["name"].start_with?("minio")
                node.vm.disk :disk, name: "main", size: "128GB", primary: true
                if spec["name"].start_with?("minio")
                    v.storage :file, :size => '16G', :device => 'vdb'
                    v.storage :file, :size => '16G', :device => 'vdc'
                    v.storage :file, :size => '16G', :device => 'vdd'
                    v.storage :file, :size => '16G', :device => 'vde'
                end
            end

            if spec["name"].start_with?("minio")
                node.vm.provision "shell" do |s|
                  s.inline = <<-SHELL
                    mkdir /data; mkfs.xfs /dev/sdb;
                    mount -o noatime -o nodiratime -t xfs /dev/sdb /data;
                    echo "/dev/sdb /data xfs defaults,noatime,nodiratime 0 0" >> /etc/fstab;
                  SHELL
                end
            end

        end
    end
end
