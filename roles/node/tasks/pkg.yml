---
#--------------------------------------------------------------#
# Install node repo (public or local)                [node_repo]
#--------------------------------------------------------------#
- name: setup node repo
  tags: [node_repo, node_install]
  block:

    # remove existing repos to /etc/yum.repos.d/backup
    - name: remove and backup existing repo file
      tags: node_repo_remove
      when: node_repo_remove|bool
      shell: |
        {% if os_package == 'rpm' %}
        mkdir -p /etc/yum.repos.d/backup;
        mv -f /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/
        {% elif os_package == 'deb' %}
        mkdir -p /etc/apt/backup;
        mv -f /etc/apt/sources.list.d/* /etc/apt/backup/ 2> /dev/null || /bin/true
        mv -f /etc/apt/sources.list     /etc/apt/backup/ 2> /dev/null || /bin/true
        {% endif %}
        /bin/true
      args: { executable: /bin/bash }

    - name: add upstream repo file to nodes
      tags: [ node_repo_upstream, node_repo_add ]
      copy:
        dest: "{{ upstream_dir }}/{{ upstream_file }}"
        content: |
          #=========# [{{ module_name }}] on {{ os_vendor }}{{ os_version }}  {{ os_arch }}: {{ os_codename }} {{ os_package }} repo
          {% if repo_upstream is not defined %}
          {% set repo_upstream = repo_upstream_default|default([]) %}
          # this upstream repo is generated from pigsty role default configuration  
          {% else %}
          # this upstream repo is generated from pigsty user defined configuration
          {% endif %}
          
          {% for repo in repo_upstream %}
          {% if os_version|int in repo.releases and repo.module == module_name and os_arch in repo.arch %}
          {% if os_package == 'rpm' %}
          {% if (os_version|int == 8 or os_version|int == 9) and (repo.name|lower in ['pgdg-common', 'pgdg12', 'pgdg13', 'pgdg14', 'pgdg15', 'pgdg16']) %}{% set target_version = os_version_full|string %}{% else %}{% set target_version = os_version|string %}{% endif %}
          [{{ repo.name }}]
          name = {{ repo.description }} $releasever - $basearch
          {% if region in repo.baseurl and repo.baseurl[region] != '' %}
          baseurl = {{ repo.baseurl[region] | replace('${admin_ip}', admin_ip) | replace('$releasever', target_version|string)  }}
          {% else %}
          baseurl = {{ repo.baseurl.default | replace('${admin_ip}', admin_ip)  | replace('$releasever', target_version|string)  }}
          {% endif %}
          gpgcheck = 0
          enabled = 1
          {% if os_version|int >= 8 %}
          module_hotfixes=1
          {% endif %}
          {% elif os_package == 'deb' %}
          {% if region in repo.baseurl and repo.baseurl[region] != '' %}
          # [module_name] [{{ os_codename }}:{{ os_version }}] {{ repo.name }}: {{ repo.description }}
          deb [trusted=yes] {{ repo.baseurl[region] | replace('${admin_ip}', admin_ip)  | replace('${distro_codename}', os_codename) | replace('${distro_name}', os_vendor) }} 
          {% else %}
          deb [trusted=yes] {{ repo.baseurl.default | replace('${admin_ip}', admin_ip)  | replace('${distro_codename}', os_codename) | replace('${distro_name}', os_vendor)  }}
          {% endif %}
          {% endif %}
          
          {% endif %}
          {% endfor %}
      vars:
        upstream_dir: "{% if os_package == 'rpm' %}/etc/yum.repos.d{% else %}/etc/apt/sources.list.d{% endif %}"
        upstream_file: "{% if os_package == 'rpm' %}{{ item }}.repo{% else %}{{ item }}.list{% endif %}"
        module_name: "{{ item }}"
      with_items: "{{ node_repo_modules.split(',') }}"

    - name: Make node local repo cache (DEB - apt update with retries)
      tags: node_repo_cache
      ansible.builtin.apt:
        update_cache: yes
      register: apt_update_result
      until: >
        apt_update_result is succeeded or (
          apt_update_result is failed and
          'Could not get lock' not in (apt_update_result.msg | default('')) and
          'Unable to lock directory' not in (apt_update_result.msg | default(''))
        )
      retries: 5
      delay: 10
      ignore_errors: yes # Ignore errors during the retry loop
      changed_when: apt_update_result.changed
      failed_when: apt_update_result is failed and (('Could not get lock' in (apt_update_result.msg | default(''))) or ('Unable to lock directory' in (apt_update_result.msg | default('')))) # Define final failure condition specifically for lock errors
      when: os_package == 'deb'

    - name: Fail if apt update ultimately failed after retries
      tags: node_repo_cache
      ansible.builtin.fail:
        msg: "APT update failed after {{ retries }} retries due to persistent lock or other error. Last error: {{ apt_update_result.msg | default('Check task output') }}"
      when:
        - os_package == 'deb'
        - apt_update_result is defined
        - apt_update_result is failed
      # No ignore_errors here, we want it to fail now

    - name: Make node local repo cache (RPM - yum makecache)
      tags: node_repo_cache
      ansible.builtin.command:
        cmd: yum makecache # Or use 'dnf makecache' if targeting newer RPM systems exclusively
      register: yum_cache_result
      changed_when: yum_cache_result.rc == 0 # Consider 'yum makecache' always changed or check output if needed
      # No retry logic added for yum by default, but could be added similarly if needed
      when: os_package == 'rpm'

#--------------------------------------------------------------#
# Install packages                                    [node_pkg]
#--------------------------------------------------------------#
- name: install node packages
  tags: node_pkg
  block:

    - name: supress deb auto start with policy-rc.d
      copy: src=policy-rc.d dest=/usr/sbin/policy-rc.d mode=0755
      when: os_package == 'deb'

    - name: install default node packages
      tags: node_pkg_default
      environment: "{{ proxy_env | default({}) }}"
      package: name={{ item }} state=present
      with_items: "{{ node_default_packages | default(node_packages_default) | default([]) }}"

    - name: install node packages (latest)
      tags: [node_pkg_extra, node_install]
      environment: "{{ proxy_env | default({}) }}"
      package: name={{ item }} state=latest
      with_items: "{{ node_packages }}"

    - name: install keepalived if enabled
      tags: node_vip
      when: vip_enabled|bool
      environment: "{{ proxy_env | default({}) }}"
      package: name={{ item }}
      with_items:
        - keepalived
        - "{% if os_package|default('rpm') == 'deb' %}keepalived-exporter{% else %}keepalived_exporter{% endif %}"
...
