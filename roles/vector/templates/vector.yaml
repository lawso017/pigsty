#==============================================================#
# Vector Configuration - Log Collection Agent
# Path: {{ vector_config_dir }}/vector.yaml  
# Generated by Ansible - DO NOT EDIT MANUALLY
#==============================================================#

# Global settings
data_dir: "{{ vector_data_dir }}"
log_level: "{{ vector_log_level }}"

# API configuration
api:
  enabled: true
  address: "127.0.0.1:{{ vector_port }}"

################################################################
#                        SOURCES                              #
################################################################

sources:
{% if vector_syslog_enabled %}
  # System logs
  syslog:
    type: file
    include:
{% for path in vector_syslog_paths %}
      - "{{ path }}"
{% endfor %}
    read_from: beginning
{% endif %}

{% if vector_docker_enabled %}
  # Docker container logs
  docker:
    type: docker_logs
    docker_host: "{{ vector_docker_socket }}"
{% endif %}

{% if pg_cluster is defined and pg_seq is defined and vector_postgres_enabled %}
  # PostgreSQL logs (JSON format)
  postgres:
    type: file
    include:
      - "{{ vector_postgres_log_dir }}/{{ vector_postgres_log_pattern }}"
    read_from: beginning
{% endif %}

{% if inventory_hostname in groups["infra"]|default([]) and vector_nginx_enabled %}
  # Nginx access logs
  nginx_access:
    type: file
    include:
      - "{{ vector_nginx_access_logs }}"
    read_from: beginning

  # Nginx error logs
  nginx_error:
    type: file
    include:
      - "{{ vector_nginx_error_logs }}"
    read_from: beginning
{% endif %}

{% if redis_cluster is defined and redis_node is defined and vector_redis_enabled %}
  # Redis logs
  redis:
    type: file
    include:
      - "{{ vector_redis_log_dir }}/{{ vector_redis_log_pattern }}"
    read_from: beginning
{% endif %}

################################################################
#                      TRANSFORMS                             #
################################################################

transforms:
{% if vector_syslog_enabled %}
  # Parse and enrich syslog
  syslog_parsed:
    type: remap
    inputs:
      - syslog
    source: |
      # Parse syslog format if needed
      .job = "node"
      .src = "syslog"
      .host = "{{ inventory_hostname }}"
      .cluster = "{{ node_cluster|default('nodes') }}"

      # Ensure we have a timestamp
      if !exists(.timestamp) {
        .timestamp = now()
      }

      # Ensure we have a message field
      if !exists(.message) {
        .message = string!(.message) ?? ""
      }
{% endif %}

{% if vector_docker_enabled %}
  # Parse and enrich Docker logs
  docker_parsed:
    type: remap
    inputs:
      - docker
    source: |
      .job = "docker"
      .src = "docker" 
      .host = "{{ inventory_hostname }}"
      .cluster = "{{ node_cluster|default('nodes') }}"

      # Extract container metadata
      .container = .container_name
      .image = .image

      # Use Docker's timestamp or current time
      if !exists(.timestamp) {
        .timestamp = .created_at ?? now()
      }

      # Use Docker's message field
      if !exists(.message) {
        .message = string!(.message) ?? ""
      }
{% endif %}

{% if pg_cluster is defined and pg_seq is defined and vector_postgres_enabled %}
  # Parse and enrich PostgreSQL logs (already JSON format)
  postgres_parsed:
    type: remap
    inputs:
      - postgres
    source: |
      .job = "pgsql"
      .src = "postgres"
      .cls = "{{ pg_cluster }}"
      .ins = "{{ pg_cluster }}-{{ pg_seq }}"
      .host = "{{ inventory_hostname }}"
      .cluster = "{{ node_cluster|default('nodes') }}"

      # PostgreSQL JSON logs should already have proper structure
      # Just ensure required fields exist
      if !exists(.timestamp) {
        .timestamp = .timestamp ?? now()
      }

      if !exists(.message) {
        .message = .message ?? .log ?? ""
      }
{% endif %}

{% if inventory_hostname in groups["infra"]|default([]) and vector_nginx_enabled %}
  # Parse and enrich Nginx access logs
  nginx_access_parsed:
    type: remap
    inputs:
      - nginx_access
    source: |
      .job = "infra"
      .src = "nginx"
      .host = "{{ inventory_hostname }}"
      .cluster = "{{ node_cluster|default('nodes') }}"

      if !exists(.timestamp) {
        .timestamp = now()
      }

      if !exists(.message) {
        .message = string!(.message) ?? ""
      }

  # Parse and enrich Nginx error logs
  nginx_error_parsed:
    type: remap
    inputs:
      - nginx_error
    source: |
      .job = "infra"
      .src = "nginx-error"
      .host = "{{ inventory_hostname }}"
      .cluster = "{{ node_cluster|default('nodes') }}"

      if !exists(.timestamp) {
        .timestamp = now()
      }

      if !exists(.message) {
        .message = string!(.message) ?? ""
      }
{% endif %}

{% if redis_cluster is defined and redis_node is defined and vector_redis_enabled %}
  # Parse and enrich Redis logs
  redis_parsed:
    type: remap
    inputs:
      - redis
    source: |
      .job = "redis"
      .src = "redis"
      .cls = "{{ redis_cluster }}"
      .ins = "{{ redis_cluster }}-{{ redis_node }}"
      .host = "{{ inventory_hostname }}"
      .cluster = "{{ node_cluster|default('nodes') }}"

      if !exists(.timestamp) {
        .timestamp = now()
      }

      if !exists(.message) {
        .message = string!(.message) ?? ""
      }
{% endif %}

################################################################
#                         SINKS                               #
################################################################

sinks:
{% if vector_vlagent_enabled %}
  # Send to vlagent (recommended for HA)
  vlagent:
    type: http
    inputs:
{% if vector_syslog_enabled %}      - syslog_parsed{% endif %}
{% if vector_docker_enabled %}      - docker_parsed{% endif %}
{% if pg_cluster is defined and pg_seq is defined and vector_postgres_enabled %}      - postgres_parsed{% endif %}
{% if inventory_hostname in groups["infra"]|default([]) and vector_nginx_enabled %}      - nginx_access_parsed
      - nginx_error_parsed{% endif %}
{% if redis_cluster is defined and redis_node is defined and vector_redis_enabled %}      - redis_parsed{% endif %}

    # Load balance across vlagent instances
    uri: "{{ vector_vlagent_endpoints[0] }}"

    # Headers for VictoriaLogs via vlagent
    request:
      headers:
        VL-Stream-Fields: "{{ vector_stream_fields }}"
        VL-Time-Field: "{{ vector_time_field }}"
        VL-Msg-Field: "{{ vector_msg_field }}"
        AccountID: "0"
        ProjectID: "0"

    # Encoding
    encoding:
      codec: json

    framing:
      method: newline_delimited

    # Performance settings
    compression: "{{ vector_compression }}"
    healthcheck:
      enabled: {{ vector_healthcheck_enabled | lower }}

    buffer:
      type: memory
      max_events: {{ vector_buffer_max_events }}
      when_full: "{{ vector_buffer_when_full }}"

    batch:
      max_events: {{ vector_batch_max_events }}
      timeout_ms: {{ vector_batch_timeout_ms }}

{% elif vector_victorialogs_enabled %}
{% for infra_host in groups['infra']|default([]) %}
  # Send directly to VictoriaLogs instance {{ loop.index }}
  victorialogs_{{ loop.index }}:
    type: http
    inputs:
{% if vector_syslog_enabled %}      - syslog_parsed{% endif %}
{% if vector_docker_enabled %}      - docker_parsed{% endif %}
{% if pg_cluster is defined and pg_seq is defined and vector_postgres_enabled %}      - postgres_parsed{% endif %}
{% if inventory_hostname in groups["infra"]|default([]) and vector_nginx_enabled %}      - nginx_access_parsed
      - nginx_error_parsed{% endif %}
{% if redis_cluster is defined and redis_node is defined and vector_redis_enabled %}      - redis_parsed{% endif %}

    # VictoriaLogs endpoint
    uri: "http://{{ infra_host }}:9428/insert/jsonline"

    # Headers for VictoriaLogs
    request:
      headers:
        VL-Stream-Fields: "{{ vector_stream_fields }}"
        VL-Time-Field: "{{ vector_time_field }}"
        VL-Msg-Field: "{{ vector_msg_field }}"
        AccountID: "0"
        ProjectID: "0"

    # Encoding
    encoding:
      codec: json

    framing:
      method: newline_delimited

    # Performance settings
    compression: "{{ vector_compression }}"
    healthcheck:
      enabled: {{ vector_healthcheck_enabled | lower }}

    buffer:
      type: memory
      max_events: {{ vector_buffer_max_events }}
      when_full: "{{ vector_buffer_when_full }}"

    batch:
      max_events: {{ vector_batch_max_events }}
      timeout_ms: {{ vector_batch_timeout_ms }}

{% endfor %}
{% endif %}